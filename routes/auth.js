const express = require('express')
const bcrypt = require('bcrypt')
const sanitize = require('mongo-sanitize')
const jwt = require('jsonwebtoken')
const Usuario = require('../models/usuario')
const almacenamiento = require('../functions/almacenamiento')
const config = require('../config/config')

const router = express.Router()

//Petición POST para la creación de un usuario
router.post('/registro', (req, res) => {
    let body = req.body
    let pass = body.password

    //Comprueba si el usuario a introducido la contraseña, si tiene al menos 8 caracteres,
    //contiene al menos un número, una mayúscula y una minúscula
    let regex = /(\d+)/g

    if (pass === undefined || pass.length < 8 || pass.match(regex) === null ||
        pass === pass.toUpperCase() || pass === pass.toLowerCase()) {
        return res.status(400).json({
            message: 'la contraseña debe tener al menos 8 caracteres, un número, una mayúscula y una minúscula'
        })
    }

    //Variable que va a obtener los datos del body del usuario
    let usuario = new Usuario({
        nombre: body.nombre,
        email: body.email
    })

    //Almacena el nuevo usuario en la base de datos
    usuario.save((err, usuarioDB) => {
        if (err) { return res.status(500).json(err) }

        //Se cifra la contraseña con el hash y se almacenan las credenciales, junto la fecha
        //de la contraseña en el servidor de node
        let credenciales = {
            email: body.email,
            password: bcrypt.hashSync(pass, 10),
            fechaPass: new Date()
        }

        almacenamiento.guardarCredenciales(credenciales)

        res.json({ usuario: usuarioDB })
    })
})

//Petición POST para la autenticación de un usuario
router.post('/login', (req, res) => {
    let body = sanitize(req.body) //Para evitar que se introduzcan comandos que empiecen por $
    let mensaje = 'usuario o contraseña incorrectos'

    //Busca el usuario en la base de datos de mongo
    Usuario.findOne({ email: body.email }, (err, usuarioDB) => {
        if (err) { return res.status(500).json(err) }
        if (!usuarioDB || body.password === undefined) { return res.status(400).json({ message: mensaje }) }

        //Busca la contraseña en el servidor de node y la compara con la introducida por el usuario
        let credenciales = almacenamiento.buscarCredenciales(body.email)

        if (!bcrypt.compareSync(body.password, credenciales.password)) {
            return res.status(400).json({ message: mensaje })
        }

        //Añade un nuevo registro log del usuario conectado y la fecha
        let log = {
            email: body.email,
            fecha: new Date()
        }

        almacenamiento.guardarLog(log)

        //Indico los datos que van a ir en el token
        let datosToken = {
            nombre: usuarioDB.nombre,
            rol: usuarioDB.rol
        }

        //Genero un token con fecha de caducidad de 2 horas
        let token = jwt.sign({
            datosToken
        }, config.semillaToken, { expiresIn: config.caducidadToken })

        //Obtengo la fecha actual - 6 meses para compararla con la fecha de la contraseña
        let fechaActual = new Date()
        fechaActual.setMonth(fechaActual.getMonth() - 6)

        //En caso de que la fecha de la contraseña exceda 6 meses de la fecha actual,
        //se le avisará al usuario para que la cambie
        if (credenciales.fechaPass < fechaActual.toJSON()) {
            let fechaExp = 'le recomendamos que cambie su contraseña para mejorar su seguridad'
            res.json({ aviso: fechaExp, usuario: usuarioDB, token })
        } else {
            res.json({ usuario: usuarioDB, token })
        }
    })
})

module.exports = router